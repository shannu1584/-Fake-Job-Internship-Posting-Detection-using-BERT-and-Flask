# -*- coding: utf-8 -*-
"""job posting detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_RNA47ChvLLD-QZ_0m-3rRx42tas4zEd
"""

!pip install flask pyngrok transformers torch

!pip install flask pyngrok transformers datasets torch gradio

!pip install transformers datasets torch gradio

!mkdir -p model       # To save your trained model
!mkdir -p uploads     # Optional, if you want to allow CSV uploads

!mkdir -p templates

!pip install flask torch transformers

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# from flask import Flask, render_template, request
# from transformers import pipeline
# import os
# 
# # Suppress TensorFlow warnings if any
# os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
# 
# app = Flask(__name__)
# 
# # Load the Fake Job Detection model once
# clf = pipeline(
#     "text-classification",
#     model="AventIQ-AI/BERT-Spam-Job-Posting-Detection-Model",
#     device=-1  # CPU
# )
# 
# @app.route("/", methods=["GET", "POST"])
# def home():
#     prediction = None
#     job_text = ""
#     if request.method == "POST":
#         job_text = request.form['job_text'][:512]  # truncate input
#         try:
#             pred = clf(job_text, truncation=True)[0]
#             label = pred['label'].lower()
#             score = round(pred['score'] * 100, 2)
# 
#             if label in ['fake', 'label_1', 'spam']:
#                 prediction = f"Fake Job Posting ‚ùå (Confidence: {score}%)"
#             else:
#                 prediction = f"Legitimate Job Posting ‚úÖ (Confidence: {score}%)"
# 
#         except Exception as e:
#             prediction = f"Error during prediction: {e}"
# 
#     return render_template("index.html", prediction=prediction, job_text=job_text)
# 
# if __name__ == "__main__":
#     # Run Flask app normally
#     app.run(host="0.0.0.0", port=8000, debug=False)
# 
#

# Commented out IPython magic to ensure Python compatibility.
# %%writefile templates/index.html
# <!DOCTYPE html>
# <html>
# <head>
#     <title>üìù Fake Job Posting Detector</title>
#     <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
# </head>
# <body>
#     <div class="container">
#         <h1>üìù Fake Job & Internship Posting Detector</h1>
# 
#         <div class="card">
#             <h2>Paste Job Posting Text</h2>
#             <form method="post" action="/">
#                 <textarea name="job_text" rows="10" placeholder="Paste the job or internship posting here..." required>{{ job_text or '' }}</textarea><br>
#                 <button type="submit">Predict üöÄ</button>
#             </form>
#         </div>
# 
#         {% if prediction %}
#         <div class="result">
#             <h2>Prediction:</h2>
#             <p>{{ prediction }}</p>
#         </div>
#         {% endif %}
#     </div>
# </body>
# </html>
#

!mkdir -p static

# Commented out IPython magic to ensure Python compatibility.
# %%writefile static/style.css
# body {
#     font-family: 'Segoe UI', sans-serif;
#     background: linear-gradient(135deg, #141E30, #243B55);
#     color: white;
#     display: flex;
#     justify-content: center;
#     align-items: center;
#     height: 100vh;
#     margin: 0;
# }
# .container {
#     text-align: center;
#     width: 60%;
# }
# h1, h2 {
#     margin-bottom: 15px;
# }
# .card {
#     background: rgba(255, 255, 255, 0.1);
#     padding: 20px;
#     border-radius: 12px;
#     box-shadow: 0 0 15px rgba(0,0,0,0.4);
#     margin-bottom: 20px;
# }
# textarea, button {
#     width: 90%;
#     margin: 10px 0;
#     padding: 10px;
#     border-radius: 8px;
#     border: none;
#     font-size: 16px;
# }
# button {
#     background: #FFD700;
#     cursor: pointer;
#     font-weight: bold;
# }
# button:hover {
#     background: #FFA500;
# }
# .result {
#     margin-top: 20px;
#     padding: 15px;
#     background: rgba(255,255,255,0.1);
#     border-radius: 10px;
# }
#

!pkill -f flask || echo "No flask running"
!pkill -f ngrok || echo "No ngrok running"

!lsof -i :8000

!kill -9 851 # here ID no shud be changed based on the above cell { PID 1949 }

!python app.py > flask.log 2>&1 &

!nohup python app.py > flask.log 2>&1 &

# Start ngrok tunnel
from pyngrok import ngrok, conf
conf.get_default().auth_token = "33pyU8XWfrN8JFX8kwzY8Uf1j7s_612rotnaQX2f58dq3n8Ez"

public_url = ngrok.connect(8000)
print("üåç Public URL:", public_url)

# Optional: check logs
!sleep 3 && tail -n 20 flask.log